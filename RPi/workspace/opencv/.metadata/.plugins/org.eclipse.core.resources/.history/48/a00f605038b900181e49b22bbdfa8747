/**
  @file grabber.cpp for grabber4 (taken from videocapture_basic.cpp
  @brief A very basic sample for using VideoCapture and VideoWriter
  @author PkLab.net
  @date Aug 24, 2016
*/
//
// Don Wiwel, 06OCT2017
// Rev:  171104. mods for raspberry pi ops.
//       171201. grabber4; using Raspberry Pi NoIR camera V2
//       171231, Working here, clean up. Adding GPIO for PIR sensor.
//       180905. Minor modes, timing, image size.
//       180911,

#include <iostream>
#include <stdio.h>
#include <time.h>

#include <opencv2/opencv.hpp>
#include <raspicam/raspicam_cv.h>
#include <pigpio.h>

#include "utils.hh"

using namespace cv;
using namespace std;

int main(int, char**)
{
    cout << "Starting my little grabber4 test program, using RPi camera ...\n" << endl;

    if (gpioInitialise() < 0)
    {
    	cout << "!! Trouble starting GPIO functions!!" << endl;
    }
    gpioSetMode(4, PI_INPUT);

    Utils meUtils;

    meUtils.initApp();

    Utils::testMe();

    Mat frameCam1;            // Current frame read.   (1280x960)
    Mat frameCam2;        // Web camera
    Mat prevFrame;        // Previous frame.
    Mat saveFrame;        // Frame to be saved to disk.

    //--- INITIALIZE VIDEOCAPTURE
    //VideoCapture cap;
    raspicam::RaspiCam_Cv cap;      // Capture item, RPi on-board camera.
    cv::VideoCapture cap2 =  cv::VideoCapture(2);

    // open the default camera using default API
    //cap.open(0);
    // OR advance usage: select any API backend
    int deviceID = 0;             // 0 = open default camera
    int apiID = cv::CAP_ANY;      // 0 = autodetect default API

    // open selected camera using selected API

    int deviceID_cam2 = 0;             // 0 = open default camera
    int apiID_cam2 = cv::CAP_ANY;      // 0 = autodetect default API

    cap.set( CV_CAP_PROP_FORMAT, CV_8UC3);  // CV_8UC1, CV_8UC3
    cap2.set( CV_CAP_PROP_FORMAT, CV_8UC3);  // CV_8UC1, CV_8UC3

    bool readyCam1 = false;
    bool readyCam2 = false;

    cap.open();
    // check if we succeeded
    if (!cap.isOpened()) {
        cerr << "ERROR! Unable to open camera #1\n";
        readyCam1 = true;
    }

    cap2.open(deviceID_cam2);
	// check if we succeeded
	if (!cap2.isOpened()) {
		cerr << "ERROR! Unable to open camera #2\n";
		readyCam2 = true;
	}

    //--- GRAB AND WRITE LOOP
    cout << "Start my little grabber ..." 
         << "Press any key to terminate" << endl;

    time_t lastImageTime = time(NULL);
    time_t currentTime = time(NULL);

	bool useImageProc = true;
	bool useIRsensor = false;   // sensor is too sensitive at the moment.


    for (;;)
    {
		currentTime = time(NULL);
		// wait for a new frame from camera and store it into 'frame'
		cap.grab();
		cap.retrieve(frameCam1);

		cap2.grab();
		cap2.retrieve(frameCam2);
		if (!frameCam2.empty() ) imshow("Cam2 Live", frameCam2);


		//Size size(1280, 960);
		Size size(320, 240);
		//Size size(160, 120);
		resize( frameCam1, frameCam1, size );     // Resizes the native frame for transmission.

		// show live and wait for a key with timeout long enough to show images
		if (!frameCam1.empty() ) imshow("Live", frameCam1);

		// check if we succeeded
		if (frameCam1.empty()) {
			cout << "ERROR! blank frame grabbed\n";
			break;
		}
		if (useImageProc)  // Use openCV
		{
			//if (!prevFrame.empty() ) imshow("PrevFrame", prevFrame);

			Scalar prevStdDev, currentStdDev;
			cv::meanStdDev(prevFrame, Scalar(), prevStdDev);
			cv::meanStdDev(frameCam1, Scalar(), currentStdDev);

			cout << "prevStdDev: " << prevStdDev << "   currentStdDev: " << currentStdDev << endl;

			if ( (cv::abs(currentStdDev[0] - prevStdDev[0]) > 1.2 )
				|| ( currentTime > ( lastImageTime + (time_t)600 ) ) )
			{
				cout << "! Camera movement activity detected !" << endl;   // Save the frame.
				saveFrame = frameCam1.clone();
				if (!saveFrame.empty() )
				{
					imshow("saveFrame", saveFrame);
					Utils::saveImageFile( saveFrame );
					lastImageTime = time(NULL);
				}
			}
			prevFrame = frameCam1.clone();
		}
        if (useIRsensor)
        {
        	if(gpioRead(4))
        	{
        		cout << "! IR motion sensor detected activity !" << endl;
				imshow("saveFrame", frameCam1);
							Utils::saveImageFile( frameCam1 );
							lastImageTime = time(NULL);
        	}
        }

		if (cv::waitKey(500) >= 0)    // 1000  ms delay.
		{
			break;
		}
    } // End main for.

    gpioTerminate();
    // the camera will be deinitialized automatically in VideoCapture destructor
    cout << "Little grabber stopped.  Enjoy the day!\n";
    return 0;
}
